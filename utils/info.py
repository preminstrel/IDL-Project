# -*- coding: utf-8 -*-
# (c) 2023 Hanshi Sun LGPL
# important information logger


from termcolor import colored
import torch
import datetime
import numpy as np
from matplotlib import pyplot as plt
import os
import seaborn as sns
import datetime

def get_device():
    """
    get the device (cuda -> mps -> cpu)
    
    params:
        None
    
    return:
        "cuda" or "mps" or "cpu"
    """
    if torch.cuda.is_available():
        return "cuda"
    else:
        return "cpu"


def terminal_msg(msg="text msg here", mode="E"):
    """
    print colored message on the terminal
    
    params:
        msg: text to be printed
        mode: "C"/"E"/"F"/"W" - Completed/Executing/Failed/Warning
        
    return:
        None
    """
    if mode == "C":
        print(colored("[Completed]", "green"), msg)
    elif mode == "E":
        print(colored("[Executing]", "blue"), msg)
    elif mode == "F":
        print(colored("[Failed]", "red"), msg)
    elif mode == "W":
        print(colored("[Warning]", "yellow"), msg)
    else:
        print("Something wrong with terminal_msg().")
        exit()


def epic_start(project_name, env="requirements.txt", config={'epochs': 60, 'batch_size': '1024*10', 'num_workers': 4, 'lr': '1e-3',}):
    """
    print basic information and settings of the experiments at the beginning
    
    params:
        project_name: project name
        env: envrionment list
        
    return:
        None
    """
    # the character is generated by the link below:
    # http://patorjk.com/software/taag/#p=display&f=Slant&t=Hanshi%20Sun
    print(
        """
   ________  _____  __   ________  __       ____               _           __ 
  / ____/  |/  / / / /  /  _/ __ \/ /      / __ \_________    (_)__  _____/ /_
 / /   / /|_/ / / / /   / // / / / /      / /_/ / ___/ __ \  / / _ \/ ___/ __/
/ /___/ /  / / /_/ /  _/ // /_/ / /___   / ____/ /  / /_/ / / /  __/ /__/ /_  
\____/_/  /_/\____/  /___/_____/_____/  /_/   /_/   \____/_/ /\___/\___/\__/  
                                                        /___/                 
    """
    )
    print(colored("[Project]", "magenta"), project_name)
    print(colored("[Datetime]", "blue"), datetime.datetime.now())
    device = get_device()
    print(colored("[Device]", "cyan"), device)
    with open(env) as f:
        content_list = f.readlines()
    converted_list = []
    for element in content_list:
        converted_list.append(element.strip())
    print(colored("[Environment]", "yellow"), converted_list)
    print(colored("[config]", "green"), config)


def config_to_string(config):
    config_str_list = []
    config['timestamp'] = datetime.datetime.now()
    for key, value in config.items():
        # Convert each key-value pair to a string and capitalize the key
        kv_str = f"{key.capitalize()}: {value}"
        config_str_list.append(kv_str)
    
    # Group the key-value pairs for better readability
    grouped_lines = []
    for i in range(0, len(config_str_list), 3):
        grouped_lines.append(", ".join(config_str_list[i:i+3]))
        
    # Join all lines into a single string
    config_str = "\n".join(grouped_lines)
    return config_str